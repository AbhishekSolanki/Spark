scala

1. Monad

It is just a wrapper. An object is wrapped with monad to provide two operations.
-identity (unit)
-bind (flatmap)

2. Functor

is a type of mapping between cateories. Given two categories, A and B, a functor, F, maps the objects or entities of
 A to the objects or entities of B. We can simply call it a function of objects or entities.

e.g map

3. parallel collections
https://docs.scala-lang.org/overviews/parallel-collections/overview.html

4. futures
https://docs.scala-lang.org/overviews/core/futures.html

5. Asyn libraries
https://docs.scala-lang.org/sips/async.html

6. val vs var
val - immutable variable
var - just a normal variable

7. clousure
a function, whose return value depends on the value of one or more variables declared outside this function.

8. option
to avoid null pointer exception if value is there oprions gives "some" else "none"

9. Null - as the name says
   Nil - empty list 
   None - used to represent some sort of null value in Options
   Nothing - is a trait, sub type of everyting but not superclass of anything

10. Traits - similar to java interface

11. streams - is a list with lazy computation

12. implicit parameters - when a function needs to be invoked without passing all the parameters. Default values of the parameter 
    is passed

13. yield - The yield keyword if specified before the expression, the value returned from every expression,
    will be returned as the collection.

14. case class - for data modelling, serializable, pattern matching 

15. auxillary constructor - secondary constructor in scala. Every auxiliary constructor in Scala should differ in the number 
    of parameters or in data types.

16. apply vs unapply - are used for mapping and unmapping data between form and model data.

17. difference between traits and abstract class

a class can only extends one class. But unlimited no. of traits
traits only supports parameter, while abstract class can have constructor
abstract class are interoperable with java, but traits are only interoperable with java if they do not have implementation.

18. Try vs Wither
-try is same as try/catch in java
-If you need to provide a little more info about the reason the computation has failed, Either may be very useful. 
With Either you specify two possible return types: the expected/correct/successful and the error case which can be as simple
as a String message to be displayed to the user

19. function currying
Currying is a technique of making a function that takes multiple arguments into a series of functions that take a
part of the arguments.

def add(a: Int)(b: Int) = a + b

val add2 = add(2)(_)

scala> add2(3)
res0: Int = 5